name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: read

jobs:
  validate:
    name: Validate (Prek)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Install Go
        uses: actions/setup-go@v6

      - name: Run Prek validators
        shell: bash
        run: |
          set -euxo pipefail
          uvx --from "prek>=0.2.12" prek run --show-diff-on-failure --color=always --all-files

  rust-linux:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust
        with:
          cache-key-prefix: rust-linux

      - name: Install build dependencies
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config clang

      - name: Determine Tesseract cache path (Linux)
        shell: bash
        run: echo "TESSERACT_CACHE=$HOME/.tesseract-rs" >> "$GITHUB_ENV"

      - name: Cache Tesseract builds
        uses: actions/cache@v4
        with:
          path: ${{ env.TESSERACT_CACHE }}
          key: ${{ runner.os }}-tesseract-${{ hashFiles('build.rs') }}
          restore-keys: |
            ${{ runner.os }}-tesseract-

      - name: Cargo build
        shell: bash
        run: cargo build --all-features --all-targets --verbose

      - name: Cargo test
        shell: bash
        env:
          RUST_LOG: debug
        run: cargo test --all-features --verbose

      - name: Consumer smoke test
        shell: bash
        run: |
          set -euxo pipefail
          cargo new --bin consumer-smoke --vcs none
          echo 'tesseract-rs = { path = "..", features = ["build-tesseract"] }' >> consumer-smoke/Cargo.toml
          cat <<'EOF' > consumer-smoke/src/main.rs
          fn main() {
              let version = tesseract_rs::TesseractAPI::version();
              println!("{version}");
          }
          EOF
          (cd consumer-smoke && cargo run --quiet)

  rust-cross:
    name: Build & Test (Cross-platform)
    runs-on: ${{ matrix.os }}
    needs: validate
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-rust
        with:
          cache-key-prefix: rust-cross-${{ matrix.os }}
          components: rustfmt, clippy

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euxo pipefail
          brew update || true
          brew install cmake ninja pkg-config || brew upgrade cmake ninja pkg-config || true

      - name: Install build dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --no-progress -y
          choco install ninja --no-progress -y
          choco install visualstudio2022buildtools --no-progress -y
          choco install visualstudio2022-workload-vctools --no-progress -y

      - name: Determine Tesseract cache path (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: printf 'TESSERACT_CACHE=%s\n' "$HOME/Library/Application Support/tesseract-rs" >> "$GITHUB_ENV"

      - name: Determine Tesseract cache path (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $path = Join-Path $Env:APPDATA 'tesseract-rs'
          echo "TESSERACT_CACHE=$path" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Cache Tesseract builds
        uses: actions/cache@v4
        with:
          path: ${{ env.TESSERACT_CACHE }}
          key: ${{ runner.os }}-tesseract-${{ hashFiles('build.rs') }}
          restore-keys: |
            ${{ runner.os }}-tesseract-

      - name: Setup MSVC environment
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Fix Windows link.exe conflict
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $gitLinkPath = "C:\Program Files\Git\usr\bin\link.exe"
          if (Test-Path $gitLinkPath) {
            Rename-Item $gitLinkPath -NewName "link_git.exe" -Force
          }

      - name: Cargo build (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: cargo build --all-features --all-targets --verbose

      - name: Cargo build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: cargo build --all-features --all-targets --verbose

      - name: Cargo test (Unix)
        if: runner.os != 'Windows'
        shell: bash
        env:
          RUST_LOG: debug
        run: cargo test --all-features --verbose

      - name: Cargo test (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $Env:RUST_LOG = 'debug'
          cargo test --all-features --verbose

      - name: Consumer smoke test (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euxo pipefail
          cargo new --bin consumer-smoke --vcs none
          echo 'tesseract-rs = { path = "..", features = ["build-tesseract"] }' >> consumer-smoke/Cargo.toml
          cat <<'EOF' > consumer-smoke/src/main.rs
          fn main() {
              let version = tesseract_rs::TesseractAPI::version();
              println!("{version}");
          }
          EOF
          (cd consumer-smoke && cargo run --quiet)

      - name: Consumer smoke test (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          cargo new --bin consumer-smoke --vcs none
          Add-Content -Path consumer-smoke/Cargo.toml -Value 'tesseract-rs = { path = "..", features = ["build-tesseract"] }'
          @'
          fn main() {
              let version = tesseract_rs::TesseractAPI::version();
              println!("{version}");
          }
          '@ | Set-Content -Path consumer-smoke/src/main.rs
          Push-Location consumer-smoke
          cargo run --quiet
          Pop-Location
